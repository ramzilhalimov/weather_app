{"ast":null,"code":"var _jsxFileName = \"/Users/user/weather_app/src/components/WeekContainer/WeekContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Card } from \"../Card/Card\";\nimport \"./WeekContainer.css\";\nimport { getWeatherData } from \"../../api\";\nimport { getCurrentWeather } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeekContainer = () => {\n  _s();\n  const [weather, setWeather] = useState({\n    current: null,\n    forecast: []\n  });\n  const [city, setCity] = useState(\"Ufa\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [current, forecast] = await Promise.all([getCurrentWeather(city), getWeatherData(city)]);\n        if (forecast && forecast.list) {\n          const dailyData = forecast.list.filter(reading => reading.dt_txt.includes(\"12:00:00\"));\n          setWeather({\n            current,\n            forecast: dailyData\n          });\n        } else {\n          throw new Error(\"Failed to fetch weather data\");\n        }\n      } catch (error) {\n        console.error(\"Произошла ошибка при получении данных о погоде\", error);\n      }\n    };\n    fetchData();\n  }, [city]);\n  const formatCards = () => {\n    return weather.forecast.map((day, index) => /*#__PURE__*/_jsxDEV(Card, {\n      day: day\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 49\n    }, this));\n  };\n  const handleCityChange = event => {\n    setCity(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"display-4 jumbotron\",\n      children: \"\\u041F\\u0440\\u043E\\u0433\\u043D\\u043E\\u0437 \\u043F\\u043E\\u0433\\u043E\\u0434\\u044B \\u043D\\u0430 5 \\u0434\\u043D\\u0435\\u0439\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: city,\n      onChange: handleCityChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(\"Запрос на\", city),\n      children: \"\\u041F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u043F\\u0440\\u043E\\u0433\\u043D\\u043E\\u0437\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"justify-content-center\",\n      children: formatCards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), weather.current && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Weather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Temperature: \", weather.current.temperature]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(WeekContainer, \"ZIsc1dgCJNKZUHxgeFYGVSZrYlw=\");\n_c = WeekContainer;\nvar _c;\n$RefreshReg$(_c, \"WeekContainer\");","map":{"version":3,"names":["React","useState","useEffect","Card","getWeatherData","getCurrentWeather","jsxDEV","_jsxDEV","WeekContainer","_s","weather","setWeather","current","forecast","city","setCity","fetchData","Promise","all","list","dailyData","filter","reading","dt_txt","includes","Error","error","console","formatCards","map","day","index","fileName","_jsxFileName","lineNumber","columnNumber","handleCityChange","event","target","value","className","children","type","onChange","onClick","log","temperature","_c","$RefreshReg$"],"sources":["/Users/user/weather_app/src/components/WeekContainer/WeekContainer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Card } from \"../Card/Card\";\nimport \"./WeekContainer.css\";\nimport { getWeatherData } from \"../../api\";\nimport { getCurrentWeather } from \"../../api\";\nexport const WeekContainer = () => {\n  const [weather, setWeather] = useState({ current: null, forecast: [] });\n  const [city, setCity] = useState(\"Ufa\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [current, forecast] = await Promise.all([\n          getCurrentWeather(city),\n          getWeatherData(city),\n        ]);\n        if (forecast && forecast.list) {\n          const dailyData = forecast.list.filter((reading) =>\n            reading.dt_txt.includes(\"12:00:00\")\n          );\n          setWeather({ current, forecast: dailyData });\n        } else {\n          throw new Error(\"Failed to fetch weather data\");\n        }\n      } catch (error) {\n        console.error(\"Произошла ошибка при получении данных о погоде\", error);\n      }\n    };\n    fetchData();\n  }, [city]);\n\n  const formatCards = () => {\n    return weather.forecast.map((day, index) => <Card day={day} key={index} />);\n  };\n\n  const handleCityChange = (event) => {\n    setCity(event.target.value);\n  };\n\n  return (\n    <div className=\"\">\n      <h1 className=\"display-4 jumbotron\">Прогноз погоды на 5 дней</h1>\n      <input type=\"text\" value={city} onChange={handleCityChange} />\n      <button onClick={() => console.log(\"Запрос на\", city)}>\n        Получить прогноз\n      </button>\n      <div className=\"justify-content-center\">{formatCards()}</div>\n      {/* Render the current weather here */}\n      {weather.current && (\n        <div>\n          <h2>Current Weather</h2>\n          {/* Display relevant current weather information here */}\n          <div>Temperature: {weather.current.temperature}</div>\n          {/* Add more current weather info as needed */}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}